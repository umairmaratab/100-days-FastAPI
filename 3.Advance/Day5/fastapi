-- SELECT * FROM products;
 -- SELECT name FROM products;
 -- SELECT id, name, is_sale FROM products;

 
 --- Rename a column by using AS
 --- SELECT id AS product_id, is_sale AS on_sale from products;

 --- Filter Results using WHERE
 --- SELECT * FROM products WHERE id = 8;

 --- SELECT * FROM products WHERE name = 'TV';

 -- SELECT * FROM products WHERE price >= 55;

 --- SELECT * FROM products WHERE inventory != 0;

--- Nested Conditions
--- SELECT * FROM products WHERE inventory > 0 AND price > 20;
--- SELECT * FROM products WHERE inventory > 0 OR price > 20;

--- Range of id's ---
--- SELECT * FROM products WHERE id = 1 OR id = 2 OR id = 3;
--- SELECT * FROM products WHERE id IN(1,2,3);


--- Matching with LIKE and using Regular Expressions
--- SELECT * FROM products WHERE name LIKE 'TV%';
--- SELECT * FROM products WHERE name LIKE '%e';
--- SELECT * FROM products WHERE name NOT LIKE '%e';
--- SELECT * FROM products WHERE name NOT LIKE '%en%';

--- ORDERING THE RESULTS
--- SELECT * FROM products ORDER BY price;
-- SELECT * FROM products ORDER BY inventory DESC, price ASC; -- This will first order by inventory and then price


--- Timestamp to check latest products
--- SELECT * FROM products ORDER BY created_at DESC;
-- SELECT * FROM products WHERE price > 50 ORDER BY created_at DESC;

--- When you work with big databases having million of rows so it's bad to 
--- select and output everything using something like SELECT * FROM products;
--- we can use LIMIT.
-- SELECT * FROM products LIMIT 5;
-- SELECT * FROM products WHERE price > 50 LIMIT 2;

-- SKIP some rows using OFFSET
SELECT * FROM products ORDER BY id LIMIT 5 OFFSET 2;
-- Adding data via sql
-- INSERT INTO products(name, price, inventory) VALUES ('Canon camera', 500, 100);

-- When we create a post we should return it back.
-- SELECT * FROM products;

-- we can use returning to return once the post is created
-- INSERT INTO products(name, price, inventory) VALUES ('Nikon camera', 700, 10), ('Sony camera', 1000, 43) returning *;

-- we can filter the returning values as well
-- INSERT INTO products(name, price, inventory) VALUES ('Iphone X', 200, 5) returning id, created_at, name;

-------------- DELETE ROWS -----------------
-- DELETE FROM products WHERE id = 23 RETURNING *;
-- SELECT * FROM products;

-- DELETE PRODUCTS BASED ON SOME CRITERIA
-- Let's delete products where Inventory is 0
-- DELETE FROM products WHERE inventory = 0 RETURNING *;
-- SELECT * FROM products;


-------------- UPDATE DATA/ROWS ----------
-- UPDATE products SET name = 'Nikon D3400', price = 400 WHERE id = 20; 

-- It's good to return the updated product when you update a product, we can use the RETURNING here as well.
-- SELECT * FROM products;
-- UPDATE products SET price = 500 WHERE id = 20 RETURNING *; 

-- we can use conditionals here as well.
UPDATE products SET is_sale = true WHERE id > 15 RETURNING *; 